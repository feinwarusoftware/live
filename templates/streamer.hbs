<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>

<nav class="navbar navbar-expand-lg navbar-dark red fixed-top">
    <div class="container">
        <a class="navbar-brand" href="/">
            <img src="img/navbarlogo.png" height="30" alt="">
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
            aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">Streamers
                        <span class="sr-only">(current)</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="https://awesomobot.com">Return to main site</a>
                </li>
            </ul>
            <form class="form-inline">
                <a href="auth/discord">
                    <button class="btn btn-sm align-middle btn-outline-white" type="button" href="auth/discord">Login with Discord</button>
                </a>
            </form>
        </div>
    </div>
</nav>
<div class="pt-5"></div>
<div class="pt-5"></div>
<div class="container">
    <div class="row">
        <div class="col-xl-10 col-lg-9 col-md-12 col-sm-12 col-12">
            <!--Card-->

            <!--Card image-->
            <video id="livestream" class="video-js vjs-default-skin vjs-fluid" controls autoplay preload="auto" data-setup='{"techorder" : ["flash"]}'>
                <source src="rtmp://79.97.226.172:1935/live/{{streamer.channel}}" type="rtmp/mp4">
            </video>

            <div class="card">

                <!--Card content-->
                <div class="card-body">
                    <!--Title-->
                    <div class="row">
                        <div class="col-2">
                            <img class="rounded-circle" src="img/{{streamer.channel}}.png" width="80%" />
                        </div>
                        <div class="col-10">
                            <h3 class="float-right"><i class="fa fa-eye" aria-hidden="true"></i> 1</h3>                            
                            <h1 class="">{{streamer.name}}</h1>
                            <h5>@{{streamer.channel}}</h5>
                        </div>
                    </div>
                    <!--Text-->
                    <div class="pt-4 row">
                        <div class="col-12">
                            <embed width="100%" height="100%" src="profile/{{streamer.channel}}">
                        </div>
                    </div>
                </div>

            </div>
            <!--/.Card-->
        </div>
        <div class="col-xl-2 col-lg-3 col-md-4 col-sm-4 col-4">
            <div id="content"></div>
            <div>
                <span id="status">Connecting...</span>
                <input type="text" id="input" disabled="disabled" />
            </div>
        </div>
    </div>
</div>

<script src="http://vjs.zencdn.net/6.6.3/video.js"></script>
<script src="https://cdn.jsdelivr.net/npm/videojs-flash@2/dist/videojs-flash.min.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>
    $(function () {
        "use strict";

        // for better performance - to avoid searching in DOM
        var content = $('#content');
        var input = $('#input');
        var status = $('#status');

        // my color assigned by the server
        var myColor = false;
        // my name sent to the server
        var myName = false;

        // if user is running mozilla then use it's built-in WebSocket
        window.WebSocket = window.WebSocket || window.MozWebSocket;

        // if browser doesn't support WebSocket, just show
        // some notification and exit
        if (!window.WebSocket) {
            content.html($('<p>', {
                text: 'Sorry, but your browser doesn\'t support WebSocket.'
            }));
            input.hide();
            $('span').hide();
            return;
        }

        // open connection
        var connection = new WebSocket('ws://79.97.226.172:80');

        connection.onopen = function () {
            // first we want users to enter their names
            input.removeAttr('disabled');
            status.text('Choose name:');
        };

        connection.onerror = function (error) {
            // just in there were some problems with connection...
            content.html($('<p>', {
                text: 'Sorry, but there\'s some problem with your ' +
                    'connection or the server is down.'
            }));
        };

        // most important part - incoming messages
        connection.onmessage = function (message) {
            // try to parse JSON message. Because we know that the server
            // always returns JSON this should work without any problem but
            // we should make sure that the massage is not chunked or
            // otherwise damaged.
            try {
                var json = JSON.parse(message.data);
            } catch (e) {
                console.log('Invalid JSON: ', message.data);
                return;
            }

            // NOTE: if you're not sure about the JSON structure
            // check the server source code above
            // first response from the server with user's color
            if (json.type === 'color') {
                myColor = json.data;
                status.text(myName + ': ').css('color', myColor);
                input.removeAttr('disabled').focus();
                // from now user can start sending messages
            } else if (json.type === 'history') { // entire message history
                // insert every single message to the chat window
                for (var i = 0; i < json.data.length; i++) {
                    addMessage(json.data[i].author, json.data[i].text,
                        json.data[i].color, new Date(json.data[i].time));
                }
            } else if (json.type === 'message') { // it's a single message
                // let the user write another message
                input.removeAttr('disabled');
                addMessage(json.data.author, json.data.text,
                    json.data.color, new Date(json.data.time));
            } else {
                console.log('Hmm..., I\'ve never seen JSON like this:', json);
            }
        };

        /**
         * Send message when user presses Enter key
         */
        input.keydown(function (e) {
            if (e.keyCode === 13) {
                var msg = $(this).val();
                if (!msg) {
                    return;
                }
                // send the message as an ordinary text
                connection.send(msg);
                $(this).val('');
                // disable the input field to make the user wait until server
                // sends back response
                input.attr('disabled', 'disabled');

                // we know that the first message sent from a user their name
                if (myName === false) {
                    myName = msg;
                }
            }
        });

        /**
         * This method is optional. If the server wasn't able to
         * respond to the in 3 seconds then show some error message 
         * to notify the user that something is wrong.
         */
        setInterval(function () {
            if (connection.readyState !== 1) {
                status.text('Error');
                input.attr('disabled', 'disabled').val(
                    'Unable to communicate with the WebSocket server.');
            }
        }, 3000);

        /**
         * Add message to the chat window
         */
        function addMessage(author, message, color, dt) {
            content.append('<p><span style="color:' + color + '">' +
                author + '</span> @ ' + (dt.getHours() < 10 ? '0' +
                    dt.getHours() : dt.getHours()) + ':' +
                (dt.getMinutes() < 10 ?
                    '0' + dt.getMinutes() : dt.getMinutes()) +
                ': ' + message + '</p>');
        }
    });
</script>